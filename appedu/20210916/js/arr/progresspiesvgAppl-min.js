"use strict";var _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},progressPies={colorByPercent:$.fn.progressPie.colorByPercent,draw:function e(){var o={},r=function e(o,r){var t=$.extend({},r);o.hasClass("vcenter")&&$.extend(t,{verticalAlign:"middle"}),o.hasClass("progressring")&&!o.hasClass("busy")&&$.extend(t,{strokeWidth:1,ringWidth:3}),o.hasClass("busy")&&(t.rotation=!0,o.hasClass("progressring")?$.extend(t,{strokeWidth:0,ringWidth:1,valueAdapter:function e(){return 90}}):t.valueAdapter=function(){return 5});var n=o.data("input");"string"==typeof n?($.extend(t,{valueInput:n}),"object"!==_typeof(o.data($.fn.setupProgressPie.dataKey))&&o.setupProgressPie(t),o.progressPie()):($.extend(t,{valueAttr:"data-percent"}),o.progressPie(t))};$(".progresspie:not(.color):not(.green):not(.red):not([data-piecolor]):not([data-piecolor-function]), .progressring:not(.color):not(.green):not(.red):not([data-piecolor]):not([data-piecolor-function])").each(function(){r($(this),o)}),$(".progresspie.color, .progressring.color").each(function(){r($(this),$.extend({mode:$.fn.progressPie.Mode.COLOR},o))}),$(".progresspie.green, .progressring.green").each(function(){r($(this),$.extend({mode:$.fn.progressPie.Mode.GREEN},o))}),$(".progresspie.red, .progressring.red").each(function(){r($(this),$.extend({mode:$.fn.progressPie.Mode.RED},o))}),$(".progresspie[data-piecolor], .progressring[data-piecolor]").each(function(){r($(this),$.extend({colorAttr:"data-piecolor"},o))}),$(".progresspie[data-piecolor-function], .progressring[data-piecolor-function]").each(function(){r($(this),$.extend({colorFunctionAttr:"data-piecolor-function"},o))})}};$(function(){progressPies.draw()});